def GameBoard(board):
    for row in board:
        print("| " + " | ".join([cell if cell != '' else ' ' for cell in row]) + " |")

def WinnerOfTheGame(board, player):
    # Check rows, columns and diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]) or all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def CheckForDraw(board):
    return all([cell != '' for row in board for cell in row])

def RemainingMoves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == '']

def Minimax(board, maximizing):
    if WinnerOfTheGame(board, 'O'):
        return 1
    if WinnerOfTheGame(board, 'X'):
        return -1
    if CheckForDraw(board):
        return 0

    if maximizing:
        best_score = float('-inf')
        for (r, c) in RemainingMoves(board):
            board[r][c] = 'O'
            score = Minimax(board, False)
            board[r][c] = ''
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for (r, c) in RemainingMoves(board):
            board[r][c] = 'X'
            score = Minimax(board, True)
            board[r][c] = ''
            best_score = min(best_score, score)
        return best_score

def BestMove(board):
    best_move = None
    best_score = float('-inf')
    for (r, c) in RemainingMoves(board):
        board[r][c] = 'O'
        score = Minimax(board, False)
        board[r][c] = ''
        if score > best_score:
            best_score = score
            best_move = (r, c)
    return best_move

def TicTacToe():
    board = [['' for _ in range(3)] for _ in range(3)]
    player = 'X'
    while True:
        GameBoard(board)
        if player == 'X':
            row = int(input("Enter row (0,1,2): "))
            col = int(input("Enter column (0,1,2): "))
            if board[row][col] == '':
                board[row][col] = player
                if WinnerOfTheGame(board, player):
                    print_board(board)
                    print(f"{player} wins!")
                    break
                player = 'O'
            else:
                print("Invalid move. Try again.")
        else:
            print("Computer's turn.")
            move =BestMove(board)
            board[move[0]][move[1]] = player
            if WinnerOfTheGame(board, player):
                GameBoard(board)
                print(f"{player} wins!")
                break
            player = 'X'
        if CheckForDraw(board):
            GameBoard(board)
            print("It's a Tie!")
            break
TicTacToe()
